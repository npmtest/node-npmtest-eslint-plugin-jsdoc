{"/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsdoc/test.js":"/* istanbul instrument in package npmtest_eslint_plugin_jsdoc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsdoc/lib.npmtest_eslint_plugin_jsdoc.js":"/* istanbul instrument in package npmtest_eslint_plugin_jsdoc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_eslint_plugin_jsdoc = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_eslint_plugin_jsdoc = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsdoc/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-eslint-plugin-jsdoc && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_eslint_plugin_jsdoc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_eslint_plugin_jsdoc\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_eslint_plugin_jsdoc.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_eslint_plugin_jsdoc.rollup.js'] =\n            local.assetsDict['/assets.npmtest_eslint_plugin_jsdoc.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_eslint_plugin_jsdoc.__dirname + '/lib.npmtest_eslint_plugin_jsdoc.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsdoc/node_modules/eslint-plugin-jsdoc/dist/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _checkParamNames = require('./rules/checkParamNames');\n\nvar _checkParamNames2 = _interopRequireDefault(_checkParamNames);\n\nvar _checkTagNames = require('./rules/checkTagNames');\n\nvar _checkTagNames2 = _interopRequireDefault(_checkTagNames);\n\nvar _checkTypes = require('./rules/checkTypes');\n\nvar _checkTypes2 = _interopRequireDefault(_checkTypes);\n\nvar _newlineAfterDescription = require('./rules/newlineAfterDescription');\n\nvar _newlineAfterDescription2 = _interopRequireDefault(_newlineAfterDescription);\n\nvar _requireDescriptionCompleteSentence = require('./rules/requireDescriptionCompleteSentence');\n\nvar _requireDescriptionCompleteSentence2 = _interopRequireDefault(_requireDescriptionCompleteSentence);\n\nvar _requireHyphenBeforeParamDescription = require('./rules/requireHyphenBeforeParamDescription');\n\nvar _requireHyphenBeforeParamDescription2 = _interopRequireDefault(_requireHyphenBeforeParamDescription);\n\nvar _requireParam = require('./rules/requireParam');\n\nvar _requireParam2 = _interopRequireDefault(_requireParam);\n\nvar _requireParamDescription = require('./rules/requireParamDescription');\n\nvar _requireParamDescription2 = _interopRequireDefault(_requireParamDescription);\n\nvar _requireParamType = require('./rules/requireParamType');\n\nvar _requireParamType2 = _interopRequireDefault(_requireParamType);\n\nvar _requireReturnsDescription = require('./rules/requireReturnsDescription');\n\nvar _requireReturnsDescription2 = _interopRequireDefault(_requireReturnsDescription);\n\nvar _requireReturnsType = require('./rules/requireReturnsType');\n\nvar _requireReturnsType2 = _interopRequireDefault(_requireReturnsType);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = {\n  rules: {\n    'check-param-names': _checkParamNames2.default,\n    'check-tag-names': _checkTagNames2.default,\n    'check-types': _checkTypes2.default,\n    'newline-after-description': _newlineAfterDescription2.default,\n    'require-description-complete-sentence': _requireDescriptionCompleteSentence2.default,\n    'require-hyphen-before-param-description': _requireHyphenBeforeParamDescription2.default,\n    'require-param': _requireParam2.default,\n    'require-param-description': _requireParamDescription2.default,\n    'require-param-type': _requireParamType2.default,\n    'require-returns-description': _requireReturnsDescription2.default,\n    'require-returns-type': _requireReturnsType2.default\n  },\n  rulesConfig: {\n    'check-param-names': 0,\n    'check-tag-names': 0,\n    'check-types': 0,\n    'newline-after-description': 0,\n    'require-description-complete-sentence': 0,\n    'require-hyphen-before-param-description': 0,\n    'require-param': 0,\n    'require-param-description': 0,\n    'require-param-type': 0,\n    'require-returns-description': 0,\n    'require-returns-type': 0\n  }\n};\nmodule.exports = exports['default'];\n//# sourceMappingURL=index.js.map","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsdoc/node_modules/eslint-plugin-jsdoc/dist/rules/checkParamNames.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _iterateJsdoc = require('../iterateJsdoc');\n\nvar _iterateJsdoc2 = _interopRequireDefault(_iterateJsdoc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar validateParameterNames = function validateParameterNames(targetTagName, functionParameterNames, jsdocParameterNames, report) {\n  return _lodash2.default.some(jsdocParameterNames, function (jsdocParameterName, index) {\n    var functionParameterName = functionParameterNames[index];\n\n    if (!functionParameterName) {\n      report('@' + targetTagName + ' \"' + jsdocParameterName + '\" does not match an existing function parameter.');\n\n      return true;\n    }\n\n    if (functionParameterName === '<ObjectPattern>') {\n      return false;\n    }\n\n    if (functionParameterName !== jsdocParameterName) {\n      report('Expected @' + targetTagName + ' names to be \"' + functionParameterNames.join(', ') + '\". Got \"' + jsdocParameterNames.join(', ') + '\".');\n\n      return true;\n    }\n\n    return false;\n  });\n};\n\nvar validateParameterNamesDeep = function validateParameterNamesDeep(targetTagName, jsdocParameterNames, report) {\n  var lastRealParameter = void 0;\n\n  return _lodash2.default.some(jsdocParameterNames, function (jsdocParameterName) {\n    var isPropertyPath = _lodash2.default.includes(jsdocParameterName, '.');\n\n    if (isPropertyPath) {\n      if (!lastRealParameter) {\n        report('@' + targetTagName + ' path declaration (\"' + jsdocParameterName + '\") appears before any real parameter.');\n\n        return true;\n      }\n\n      var pathRootNodeName = jsdocParameterName.slice(0, jsdocParameterName.indexOf('.'));\n\n      if (pathRootNodeName !== lastRealParameter) {\n        report('@' + targetTagName + ' path declaration (\"' + jsdocParameterName + '\") root node name (\"' + pathRootNodeName + '\") does not match previous real parameter name (\"' + lastRealParameter + '\").');\n\n        return true;\n      }\n    } else {\n      lastRealParameter = jsdocParameterName;\n    }\n\n    return false;\n  });\n};\n\nexports.default = (0, _iterateJsdoc2.default)(function (_ref) {\n  var report = _ref.report,\n      utils = _ref.utils;\n\n  var functionParameterNames = utils.getFunctionParameterNames();\n  var jsdocParameterNames = utils.getJsdocParameterNames();\n  var jsdocParameterNamesDeep = utils.getJsdocParameterNamesDeep();\n  var targetTagName = utils.getPreferredTagName('param');\n  var isError = validateParameterNames(targetTagName, functionParameterNames, jsdocParameterNames, report);\n\n  if (isError) {\n    return;\n  }\n\n  validateParameterNamesDeep(targetTagName, jsdocParameterNamesDeep, report);\n});\nmodule.exports = exports['default'];\n//# sourceMappingURL=checkParamNames.js.map","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsdoc/node_modules/eslint-plugin-jsdoc/dist/iterateJsdoc.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _commentParser = require('comment-parser');\n\nvar _commentParser2 = _interopRequireDefault(_commentParser);\n\nvar _jsdocUtils = require('./jsdocUtils');\n\nvar _jsdocUtils2 = _interopRequireDefault(_jsdocUtils);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar curryUtils = function curryUtils(functionNode, jsdoc, tagNamePreference, additionalTagNames) {\n  var utils = {};\n\n  utils.getFunctionParameterNames = function () {\n    return _jsdocUtils2.default.getFunctionParameterNames(functionNode);\n  };\n\n  utils.getJsdocParameterNamesDeep = function () {\n    return _jsdocUtils2.default.getJsdocParameterNamesDeep(jsdoc, utils.getPreferredTagName('param'));\n  };\n\n  utils.getJsdocParameterNames = function () {\n    return _jsdocUtils2.default.getJsdocParameterNames(jsdoc, utils.getPreferredTagName('param'));\n  };\n\n  utils.getPreferredTagName = function (name) {\n    return _jsdocUtils2.default.getPreferredTagName(name, tagNamePreference);\n  };\n\n  utils.isValidTag = function (name) {\n    return _jsdocUtils2.default.isValidTag(name, additionalTagNames);\n  };\n\n  utils.hasTag = function (name) {\n    return _jsdocUtils2.default.hasTag(jsdoc, name);\n  };\n\n  return utils;\n};\n\nexports.default = function (iterator) {\n  return function (context) {\n    var sourceCode = context.getSourceCode();\n    var tagNamePreference = _lodash2.default.get(context, 'settings.jsdoc.tagNamePreference') || {};\n    var additionalTagNames = _lodash2.default.get(context, 'settings.jsdoc.additionalTagNames') || {};\n\n    var checkJsdoc = function checkJsdoc(functionNode) {\n      var jsdocNode = sourceCode.getJSDocComment(functionNode);\n\n      if (!jsdocNode) {\n        return;\n      }\n\n      var jsdoc = (0, _commentParser2.default)('/*' + jsdocNode.value + '*/', {\n        // @see https://github.com/yavorskiy/comment-parser/issues/21\n        parsers: [_commentParser2.default.PARSERS.parse_tag, _commentParser2.default.PARSERS.parse_type, function (str, data) {\n          if (_lodash2.default.includes(['return', 'returns'], data.tag)) {\n            return null;\n          }\n\n          return _commentParser2.default.PARSERS.parse_name(str, data);\n        }, _commentParser2.default.PARSERS.parse_description]\n      })[0] || {};\n\n      var report = function report(message) {\n        context.report(jsdocNode, message);\n      };\n\n      var utils = curryUtils(functionNode, jsdoc, tagNamePreference, additionalTagNames);\n\n      iterator({\n        context,\n        functionNode,\n        jsdoc,\n        jsdocNode,\n        report,\n        utils\n      });\n    };\n\n    return {\n      ArrowFunctionExpression: checkJsdoc,\n      FunctionDeclaration: checkJsdoc,\n      FunctionExpression: checkJsdoc\n    };\n  };\n};\n\nmodule.exports = exports['default'];\n//# sourceMappingURL=iterateJsdoc.js.map","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsdoc/node_modules/eslint-plugin-jsdoc/dist/jsdocUtils.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _tagNames = require('./tagNames');\n\nvar _tagNames2 = _interopRequireDefault(_tagNames);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar getFunctionParameterNames = function getFunctionParameterNames(functionNode) {\n  return _lodash2.default.map(functionNode.params, function (param) {\n    if (_lodash2.default.has(param, 'name')) {\n      return param.name;\n    }\n\n    if (_lodash2.default.has(param, 'left.name')) {\n      return param.left.name;\n    }\n\n    if (param.type === 'ObjectPattern') {\n      return '<ObjectPattern>';\n    }\n\n    if (param.type === 'RestElement') {\n      return param.argument.name;\n    }\n\n    throw new Error('Unsupported function signature format.');\n  });\n};\n\n/**\n * Gets all parameter names, including those that refer to a path, e.g. \"@param foo; @param foo.bar\".\n */\nvar getJsdocParameterNamesDeep = function getJsdocParameterNamesDeep(jsdoc, targetTagName) {\n  var jsdocParameterNames = void 0;\n\n  jsdocParameterNames = _lodash2.default.filter(jsdoc.tags, {\n    tag: targetTagName\n  });\n\n  jsdocParameterNames = _lodash2.default.map(jsdocParameterNames, 'name');\n\n  return jsdocParameterNames;\n};\n\nvar getJsdocParameterNames = function getJsdocParameterNames(jsdoc, targetTagName) {\n  var jsdocParameterNames = void 0;\n\n  jsdocParameterNames = getJsdocParameterNamesDeep(jsdoc, targetTagName);\n\n  jsdocParameterNames = _lodash2.default.filter(jsdocParameterNames, function (name) {\n    return name.indexOf('.') === -1;\n  });\n\n  return jsdocParameterNames;\n};\n\nvar getPreferredTagName = function getPreferredTagName(name) {\n  var tagPreference = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (_lodash2.default.includes(_lodash2.default.values(tagPreference), name)) {\n    return name;\n  }\n\n  var preferredTagName = _lodash2.default.findKey(_tagNames2.default, function (aliases) {\n    return _lodash2.default.includes(aliases, name);\n  });\n\n  if (preferredTagName) {\n    return preferredTagName;\n  }\n\n  return _lodash2.default.has(tagPreference, name) ? tagPreference[name] : name;\n};\n\nvar isValidTag = function isValidTag(name, additionalTagNames) {\n  var validTagNames = _lodash2.default.keys(_tagNames2.default).concat(_lodash2.default.flatten(_lodash2.default.values(_tagNames2.default)));\n  var additionalTags = additionalTagNames.customTags || [];\n  var allTags = validTagNames.concat(additionalTags);\n\n  return _lodash2.default.includes(allTags, name);\n};\n\nvar hasTag = function hasTag(jsdoc, targetTagName) {\n  var targetTagLower = targetTagName.toLowerCase();\n\n  return _lodash2.default.some(jsdoc.tags, function (doc) {\n    return doc.tag.toLowerCase() === targetTagLower;\n  });\n};\n\nexports.default = {\n  getFunctionParameterNames,\n  getJsdocParameterNames,\n  getJsdocParameterNamesDeep,\n  getPreferredTagName,\n  hasTag,\n  isValidTag\n};\nmodule.exports = exports['default'];\n//# sourceMappingURL=jsdocUtils.js.map","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsdoc/node_modules/eslint-plugin-jsdoc/dist/tagNames.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = {\n  abstract: ['virtual'],\n  access: [],\n  alias: [],\n  augments: ['extends'],\n  author: [],\n  borrows: [],\n  callback: [],\n  class: ['constructor'],\n  classdesc: [],\n  constant: ['const'],\n  constructs: [],\n  copyright: [],\n  default: ['defaultvalue'],\n  deprecated: [],\n  description: ['desc'],\n  enum: [],\n  event: [],\n  example: [],\n  exports: [],\n  external: ['host'],\n  file: ['fileoverview', 'overview'],\n  fires: ['emits'],\n  function: ['func', 'method'],\n  global: [],\n  ignore: [],\n  implements: [],\n  inheritdoc: [],\n  inner: [],\n  instance: [],\n  interface: [],\n  kind: [],\n  lends: [],\n  license: [],\n  listens: [],\n  member: ['var'],\n  memberof: [],\n  mixes: [],\n  mixin: [],\n  module: [],\n  name: [],\n  namespace: [],\n  override: [],\n  param: ['arg', 'argument'],\n  private: [],\n  property: ['prop'],\n  protected: [],\n  public: [],\n  readonly: [],\n  requires: [],\n  returns: ['return'],\n  see: [],\n  since: [],\n  static: [],\n  summary: [],\n  this: [],\n  throws: ['exception'],\n  todo: [],\n  tutorial: [],\n  type: [],\n  typedef: [],\n  variation: [],\n  version: []\n};\nmodule.exports = exports['default'];\n//# sourceMappingURL=tagNames.js.map","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsdoc/node_modules/eslint-plugin-jsdoc/dist/rules/checkTagNames.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _iterateJsdoc = require('../iterateJsdoc');\n\nvar _iterateJsdoc2 = _interopRequireDefault(_iterateJsdoc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = (0, _iterateJsdoc2.default)(function (_ref) {\n  var jsdoc = _ref.jsdoc,\n      report = _ref.report,\n      utils = _ref.utils;\n\n  _lodash2.default.forEach(jsdoc.tags, function (jsdocTag) {\n    if (utils.isValidTag(jsdocTag.tag)) {\n      var preferredTagName = utils.getPreferredTagName(jsdocTag.tag);\n\n      if (preferredTagName !== jsdocTag.tag) {\n        report('Invalid JSDoc tag (preference). Replace \"' + jsdocTag.tag + '\" JSDoc tag with \"' + preferredTagName + '\".');\n      }\n    } else {\n      report('Invalid JSDoc tag name \"' + jsdocTag.tag + '\".');\n    }\n  });\n});\nmodule.exports = exports['default'];\n//# sourceMappingURL=checkTagNames.js.map","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsdoc/node_modules/eslint-plugin-jsdoc/dist/rules/checkTypes.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _iterateJsdoc = require('./../iterateJsdoc');\n\nvar _iterateJsdoc2 = _interopRequireDefault(_iterateJsdoc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar targetTags = ['class', 'constant', 'enum', 'member', 'module', 'namespace', 'param', 'property', 'returns', 'throws', 'type', 'typedef'];\n\nvar targetTagAliases = ['constructor', 'const', 'var', 'arg', 'argument', 'prop', 'return', 'exception'];\n\ntargetTags = targetTags.concat(targetTagAliases);\n\nvar strictNativeTypes = ['boolean', 'number', 'string', 'Array', 'Object', 'RegExp', 'Date', 'Function'];\n\nexports.default = (0, _iterateJsdoc2.default)(function (_ref) {\n  var jsdoc = _ref.jsdoc,\n      report = _ref.report;\n\n  var jsdocTags = _lodash2.default.filter(jsdoc.tags, function (tag) {\n    return _lodash2.default.includes(targetTags, tag.tag);\n  });\n\n  _lodash2.default.forEach(jsdocTags, function (jsdocTag) {\n    _lodash2.default.some(strictNativeTypes, function (strictNativeType) {\n      if (strictNativeType.toLowerCase() === jsdocTag.type.toLowerCase() && strictNativeType !== jsdocTag.type) {\n        report('Invalid JSDoc @' + jsdocTag.tag + ' \"' + jsdocTag.name + '\" type \"' + jsdocTag.type + '\".');\n\n        return true;\n      }\n\n      return false;\n    });\n  });\n});\nmodule.exports = exports['default'];\n//# sourceMappingURL=checkTypes.js.map","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsdoc/node_modules/eslint-plugin-jsdoc/dist/rules/newlineAfterDescription.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _iterateJsdoc = require('../iterateJsdoc');\n\nvar _iterateJsdoc2 = _interopRequireDefault(_iterateJsdoc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = (0, _iterateJsdoc2.default)(function (_ref) {\n  var jsdoc = _ref.jsdoc,\n      report = _ref.report,\n      context = _ref.context;\n\n  var always = void 0;\n\n  if (!jsdoc.description || !jsdoc.tags.length) {\n    return;\n  }\n\n  if (_lodash2.default.has(context.options, 0)) {\n    always = context.options[0] === 'always';\n  } else {\n    always = true;\n  }\n\n  // The contents of the jsdoc.source and of jsdoc.description is left trimmed.\n  // The contents of the jsdoc.description is right trimmed.\n  // This gets the text following the description.\n  var descriptionEndsWithANewline = _lodash2.default.startsWith(jsdoc.source.slice(jsdoc.description.length), '\\n\\n');\n\n  if (always) {\n    if (!descriptionEndsWithANewline) {\n      report('There must be a newline after the description of the JSDoc block.');\n    }\n  } else if (descriptionEndsWithANewline) {\n    report('There must be no newline after the description of the JSDoc block.');\n  }\n});\nmodule.exports = exports['default'];\n//# sourceMappingURL=newlineAfterDescription.js.map","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsdoc/node_modules/eslint-plugin-jsdoc/dist/rules/requireDescriptionCompleteSentence.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _iterateJsdoc = require('../iterateJsdoc');\n\nvar _iterateJsdoc2 = _interopRequireDefault(_iterateJsdoc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar extractParagraphs = function extractParagraphs(text) {\n  return text.split(/\\n\\n/);\n};\n\nvar isNewLinePrecededByAPeriod = function isNewLinePrecededByAPeriod(text) {\n  var lastLineEndsSentence = void 0;\n\n  var lines = text.split('\\n');\n\n  return !_lodash2.default.some(lines, function (line) {\n    if (_lodash2.default.isBoolean(lastLineEndsSentence) && !lastLineEndsSentence && /^[A-Z]/.test(line)) {\n      return true;\n    }\n\n    lastLineEndsSentence = /\\.$/.test(line);\n\n    return false;\n  });\n};\n\nvar validateDescription = function validateDescription(description, report) {\n  if (!description) {\n    return false;\n  }\n\n  var paragraphs = extractParagraphs(description);\n\n  return _lodash2.default.some(paragraphs, function (paragraph, index) {\n    if (!/^[A-Z]/.test(paragraph)) {\n      if (index === 0) {\n        report('Description must start with an uppercase character.');\n      } else {\n        report('Paragraph must start with an uppercase character.');\n      }\n\n      return true;\n    }\n\n    if (!/\\.$/.test(paragraph)) {\n      report('Sentence must end with a period.');\n\n      return true;\n    }\n\n    if (!isNewLinePrecededByAPeriod(paragraph)) {\n      report('A line of text is started with an uppercase character, but preceding line does not end the sentence.');\n\n      return true;\n    }\n\n    return false;\n  });\n};\n\nexports.default = (0, _iterateJsdoc2.default)(function (_ref) {\n  var jsdoc = _ref.jsdoc,\n      report = _ref.report;\n\n  if (validateDescription(jsdoc.description, report)) {\n    return;\n  }\n\n  var tags = _lodash2.default.filter(jsdoc.tags, function (tag) {\n    return _lodash2.default.includes(['param', 'returns'], tag.tag);\n  });\n\n  _lodash2.default.some(tags, function (tag) {\n    var description = _lodash2.default.trimStart(tag.description, '- ');\n\n    return validateDescription(description, report);\n  });\n});\nmodule.exports = exports['default'];\n//# sourceMappingURL=requireDescriptionCompleteSentence.js.map","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsdoc/node_modules/eslint-plugin-jsdoc/dist/rules/requireHyphenBeforeParamDescription.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _iterateJsdoc = require('../iterateJsdoc');\n\nvar _iterateJsdoc2 = _interopRequireDefault(_iterateJsdoc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = (0, _iterateJsdoc2.default)(function (_ref) {\n  var jsdoc = _ref.jsdoc,\n      report = _ref.report;\n\n  var jsdocTags = _lodash2.default.filter(jsdoc.tags, {\n    tag: 'param'\n  });\n\n  _lodash2.default.forEach(jsdocTags, function (jsdocTag) {\n    if (jsdocTag.description && !_lodash2.default.startsWith(jsdocTag.description, '-')) {\n      report('There must be a hyphen before @param description.');\n    }\n  });\n});\nmodule.exports = exports['default'];\n//# sourceMappingURL=requireHyphenBeforeParamDescription.js.map","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsdoc/node_modules/eslint-plugin-jsdoc/dist/rules/requireParam.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _iterateJsdoc = require('../iterateJsdoc');\n\nvar _iterateJsdoc2 = _interopRequireDefault(_iterateJsdoc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = (0, _iterateJsdoc2.default)(function (_ref) {\n  var report = _ref.report,\n      utils = _ref.utils;\n\n  var functionParameterNames = utils.getFunctionParameterNames();\n  var jsdocParameterNames = utils.getJsdocParameterNames();\n\n  // inheritdoc implies that all documentation is inherited; see http://usejsdoc.org/tags-inheritdoc.html\n  if (utils.hasTag('inheritdoc')) {\n    return;\n  }\n\n  _lodash2.default.some(functionParameterNames, function (functionParameterName, index) {\n    var jsdocParameterName = jsdocParameterNames[index];\n\n    if (!jsdocParameterName) {\n      report('Missing JSDoc @' + utils.getPreferredTagName('param') + ' \"' + functionParameterName + '\" declaration.');\n\n      return true;\n    }\n\n    return false;\n  });\n});\nmodule.exports = exports['default'];\n//# sourceMappingURL=requireParam.js.map","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsdoc/node_modules/eslint-plugin-jsdoc/dist/rules/requireParamDescription.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _iterateJsdoc = require('../iterateJsdoc');\n\nvar _iterateJsdoc2 = _interopRequireDefault(_iterateJsdoc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = (0, _iterateJsdoc2.default)(function (_ref) {\n  var jsdoc = _ref.jsdoc,\n      report = _ref.report,\n      utils = _ref.utils;\n\n  var targetTagName = utils.getPreferredTagName('param');\n\n  var jsdocParameters = _lodash2.default.filter(jsdoc.tags, {\n    tag: targetTagName\n  });\n\n  _lodash2.default.forEach(jsdocParameters, function (jsdocParameter) {\n    if (!jsdocParameter.description) {\n      report('Missing JSDoc @' + targetTagName + ' \"' + jsdocParameter.name + '\" description.');\n    }\n  });\n});\nmodule.exports = exports['default'];\n//# sourceMappingURL=requireParamDescription.js.map","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsdoc/node_modules/eslint-plugin-jsdoc/dist/rules/requireParamType.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _iterateJsdoc = require('../iterateJsdoc');\n\nvar _iterateJsdoc2 = _interopRequireDefault(_iterateJsdoc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = (0, _iterateJsdoc2.default)(function (_ref) {\n  var jsdoc = _ref.jsdoc,\n      report = _ref.report,\n      utils = _ref.utils;\n\n  var targetTagName = utils.getPreferredTagName('param');\n\n  var jsdocParameters = _lodash2.default.filter(jsdoc.tags, {\n    tag: targetTagName\n  });\n\n  _lodash2.default.forEach(jsdocParameters, function (jsdocParameter) {\n    if (!jsdocParameter.type) {\n      report('Missing JSDoc @' + targetTagName + ' \"' + jsdocParameter.name + '\" type.');\n    }\n  });\n});\nmodule.exports = exports['default'];\n//# sourceMappingURL=requireParamType.js.map","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsdoc/node_modules/eslint-plugin-jsdoc/dist/rules/requireReturnsDescription.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _iterateJsdoc = require('../iterateJsdoc');\n\nvar _iterateJsdoc2 = _interopRequireDefault(_iterateJsdoc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = (0, _iterateJsdoc2.default)(function (_ref) {\n  var jsdoc = _ref.jsdoc,\n      report = _ref.report,\n      utils = _ref.utils;\n\n  var targetTagName = utils.getPreferredTagName('returns');\n\n  var jsdocTags = _lodash2.default.filter(jsdoc.tags, {\n    tag: targetTagName\n  });\n\n  _lodash2.default.forEach(jsdocTags, function (jsdocTag) {\n    if (!jsdocTag.description) {\n      report('Missing JSDoc @' + targetTagName + ' description.');\n    }\n  });\n});\nmodule.exports = exports['default'];\n//# sourceMappingURL=requireReturnsDescription.js.map","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsdoc/node_modules/eslint-plugin-jsdoc/dist/rules/requireReturnsType.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _iterateJsdoc = require('../iterateJsdoc');\n\nvar _iterateJsdoc2 = _interopRequireDefault(_iterateJsdoc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = (0, _iterateJsdoc2.default)(function (_ref) {\n  var jsdoc = _ref.jsdoc,\n      report = _ref.report,\n      utils = _ref.utils;\n\n  var targetTagName = utils.getPreferredTagName('returns');\n\n  var jsdocTags = _lodash2.default.filter(jsdoc.tags, {\n    tag: targetTagName\n  });\n\n  _lodash2.default.forEach(jsdocTags, function (jsdocTag) {\n    if (!jsdocTag.type) {\n      report('Missing JSDoc @' + targetTagName + ' type.');\n    }\n  });\n});\nmodule.exports = exports['default'];\n//# sourceMappingURL=requireReturnsType.js.map","/home/travis/build/npmtest/node-npmtest-eslint-plugin-jsdoc/node_modules/eslint-plugin-jsdoc/bin/readme-assertions.js":"/**\n * This script is used to inline assertions into the README.md documents.\n */\nimport _ from 'lodash';\nimport glob from 'glob';\nimport path from 'path';\nimport fs from 'fs';\n\nconst formatCodeSnippet = (setup) => {\n    const paragraphs = [];\n\n    paragraphs.push(trimCode(setup.code));\n\n    if (setup.options) {\n        paragraphs.push('// Options: ' + JSON.stringify(setup.options));\n    }\n\n    if (setup.errors) {\n        paragraphs.push('// Message: ' + setup.errors[0].message);\n    }\n\n    return paragraphs.join('\\n');\n};\n\nconst getAssertions = () => {\n    const assertionFiles = glob.sync(path.resolve(__dirname, '../test/rules/assertions/*.js'));\n\n    const assertionNames = _.map(assertionFiles, (filePath) => {\n        return path.basename(filePath, '.js');\n    });\n\n    const assertionCodes = _.map(assertionFiles, (filePath) => {\n        let codes;\n\n        codes = require(filePath).default;\n\n        return {\n            valid: _.map(codes.valid, formatCodeSnippet),\n            invalid: _.map(codes.invalid, formatCodeSnippet)\n        };\n    });\n\n    return _.zipObject(assertionNames, assertionCodes);\n};\n\nconst trimCode = (code) => {\n    let lines = _.trim(code).split('\\n');\n\n    const indendation = lines[lines.length - 1].match(/^\\s+/);\n\n    const indentSize = indendation ? indendation[0].length : 0;\n\n    lines = _.map(lines, (line, i) => {\n        if (i === 0) {\n            return line;\n        }\n\n        return line.slice(indentSize);\n    });\n\n    return lines.join('\\n');\n};\n\nconst updateDocuments = (assertions) => {\n    const readmeDocumentPath = path.join(__dirname, '../README.md');\n\n    let documentBody = fs.readFileSync(readmeDocumentPath, 'utf8');\n\n    documentBody = documentBody.replace(/<!-- assertions ([a-z]+?) -->/ig, (assertionsBlock) => {\n        let ruleName,\n            ruleAssertions;\n\n        ruleName = assertionsBlock.match(/assertions ([a-z]+)/i)[1];\n\n        ruleAssertions = assertions[ruleName];\n\n        if (!ruleAssertions) {\n            throw new Error('No assertions available for rule \"' + ruleName + '\".');\n\n            return assertionsBlock;\n        }\n\n        return 'The following patterns are considered problems:\\n\\n```js\\n' + ruleAssertions.invalid.join('\\n\\n') + '\\n```\\n\\nThe following patterns are not considered problems:\\n\\n```js\\n' + ruleAssertions.valid.join('\\n\\n') + '\\n```\\n';\n    });\n\n    fs.writeFileSync(readmeDocumentPath, documentBody);\n};\n\nupdateDocuments(getAssertions());\n"}